package com.jomof.nihonpipe.groveler

import java.io.File

private val projectRootDir = File(".").absoluteFile.canonicalFile!!
internal val linuxScriptFile = File(projectRootDir, "make.sh")
internal val dataDir = File(projectRootDir, "data")
/*--*/internal val dataKuromojiBin = File(dataDir, "kuromoji-cache.bin")
/*--*/internal val jishoJlptVocabsBin = File(dataDir, "jisho-jlpt-vocabs.bin")
/*--*/internal val optimizedKoreVocabsBin = File(dataDir, "optimized-kore-vocabs.bin")
/*--*/internal val wanikaniVocabsBin = File(dataDir, "wanikani-vocabs.bin")
/*--*/internal val tanakaCorpusSentencesBin = File(dataDir, "tanaka-corpus-sentences.bin")
/*--*/internal val wanikaniVsJlptVocabsBin = File(dataDir, "wanikani-vs-jlpt-vocabs.bin")
/*--*/internal val sentenceStatisticsCacheBin = File(dataDir, "sentence-statistics-cache.bin")
/*--*/internal val sentenceSkeletonFilter = File(dataDir, "sentence-skeleton.filter")
/*--*/internal val grammarSummaryFilter = File(dataDir, "grammar-summary.filter")
/*--*/internal val wanikaniSummaryFilter = File(dataDir, "wanikani-level.filter")
private val externalDir = File(projectRootDir, "external")
/*--*/internal val optimizedKoreFile = File(externalDir, "optimized-kore.tsv")
/*--*/internal val wanikaniVocabFile = File(externalDir, "wani-kani-vocab.tsv")
/*--*/private val wanikaniVsJlptDir = File(externalDir, "wanikani-vs-jlpt")
/*----*/internal val wanikanivsjlptJLPT1 = File(wanikaniVsJlptDir, "jlpt1.tsv")
/*----*/internal val wanikanivsjlptJLPT2 = File(wanikaniVsJlptDir, "jlpt2.tsv")
/*----*/internal val wanikanivsjlptJLPT3 = File(wanikaniVsJlptDir, "jlpt3.tsv")
/*----*/internal val wanikanivsjlptJLPT4 = File(wanikaniVsJlptDir, "jlpt4.tsv")
/*----*/internal val wanikanivsjlptJLPT5 = File(wanikaniVsJlptDir, "jlpt5.tsv")
/*--*/private val jishoDir = File(externalDir, "jisho")
/*----*/internal val jishoJLPT1 = File(jishoDir, "JLPT1.tsv")
/*----*/internal val jishoJLPT2 = File(jishoDir, "JLPT2.tsv")
/*----*/internal val jishoJLPT3 = File(jishoDir, "JLPT3.tsv")
/*----*/internal val jishoJLPT4 = File(jishoDir, "JLPT4.tsv")
/*----*/internal val jishoJLPT5 = File(jishoDir, "JLPT5.tsv")
/*--*/private val jacyDir = File(externalDir, "jacy")
/*----*/private val jacyAceDir = File(jacyDir, "ace")
/*----*/internal val jacyAceConfigTdlFile = File(jacyAceDir, "config.tdl")
/*----*/private val jacyDataDir = File(jacyDir, "data")
/*------*/internal val jacyDataTanakaDir = File(jacyDataDir, "tanaka")
/**/private val processedDir = File(projectRootDir, "processed")
/*--*/ val indexedDir = File(processedDir, "indexed")
/*--*/private val binDir = File(projectRootDir, "bin")
/*----*/private val aceBinDir = File(binDir, "ace-0.9.26")
/*----*/internal val aceExecutableFile = File(aceBinDir, "ace")
/**/private val grammarsDir = File(projectRootDir, "grammars")
/*--*/private val grammarsJacyDir = File(grammarsDir, "jacy")
/*--*/internal val grammarsJacyDatFile = File(grammarsJacyDir, "jacy.dat")
